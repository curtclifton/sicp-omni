#lang racket

(require "helpers.rkt")
(require "mcons-all-the-things.rkt")

;; “Operations on deques are the constructor make-deque, the predicate empty-deque?, selectors front-deque and rear-deque, and mutators front-insert-deque!, rear-insert-deque!, front-delete-deque!, and rear-delete-deque!”

(define (make-deque)
  (cons '() '()))
(define (print-deque deque)
  (display (car deque))
  (newline))
(define (empty-deque? deque)
  (null? (car deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
    (error "an empty deque has no front")
    (car (car deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
    (error "an empty deque has no rear")
    (car (cdr deque))))
(define (front-insert-deque! deque element)
  (if (empty-deque? deque)
      (let ((elements (list element)))
        (set-car! deque elements)
        (set-cdr! deque elements))
      (set-car! deque (cons element (car deque)))))
(define (rear-insert-deque! deque element)
  (if (empty-deque? deque)
      (let ((elements (list element)))
        (set-car! deque elements)
        (set-cdr! deque elements))
      (begin
        (set-cdr! (cdr deque) (list element))
        (set-cdr! deque (cdr (cdr deque))))))
(define (front-delete-deque! deque)
  (let ((result (front-deque deque)))
    (set-car! deque (cdr (car deque)))
    result))
(define (rear-delete-deque! deque)
  (let ((result (rear-deque deque)))
    ; TODO: oops, representation doesn't admit O(1) rear delete, need base elements to be a doubly-linked list
    result))

(println "empty deque")
(define dq (make-deque))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "inserting 'a at front")
(front-insert-deque! dq 'a)
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "inserting 'b at front")
(front-insert-deque! dq 'b)
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "inserting 'c at rear")
(rear-insert-deque! dq 'c)
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "inserting 'd at rear")
(rear-insert-deque! dq 'd)
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "front: " (front-deque dq))
(println "rear: " (rear-deque dq))
(println "delete front: " (front-delete-deque! dq))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "delete front: " (front-delete-deque! dq))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "delete front: " (front-delete-deque! dq))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
