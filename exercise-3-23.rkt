#lang racket

(require "helpers.rkt")
(require "mcons-all-the-things.rkt")

;; “Operations on deques are the constructor make-deque, the predicate empty-deque?, selectors front-deque and rear-deque, and mutators front-insert-deque!, rear-insert-deque!, front-delete-deque!, and rear-delete-deque!”

;; Some helpers
(define (make-deque-node prev-node element next-node)
  (cons prev-node (cons element next-node)))
(define (make-singleton-deque-node element)
  (make-deque-node '() element '()))
(define (prev-node node)
  (car node))
(define (next-node node)
  (cdr (cdr node)))
(define (element node)
  (car (cdr node)))
(define (set-prev-node! node prev)
  (set-car! node prev))
(define (set-next-node! node next)
  (set-cdr! (cdr node) next))
(define (first-node deque)
  (car deque))
(define (last-node deque)
  (cdr deque))
(define (set-first-node! deque node)
  (set-car! deque node))
(define (set-last-node! deque node)
  (set-cdr! deque node))

;; The assigned procedures
(define (make-deque)
  (cons '() '()))
(define (print-deque deque)
  (define (print-deque-nodes node)
    (cond ((null? (next-node node))
            (display (element node)))
          ((null? node)
            (error "shouldn't have called helper print-deque-nodes with null node"))
          (else
            (display (element node))
            (display " ")
            (print-deque-nodes (next-node node)))))
  (if (empty-deque? deque)
      (display "<>")
      (begin
        (display "<")
        (print-deque-nodes (first-node deque))
        (display ">")))
  (newline))
(define (empty-deque? deque)
  (null? (first-node deque)))
(define (front-deque deque)
  (if (empty-deque? deque)
    (error "an empty deque has no front")
    (element (first-node deque))))
(define (rear-deque deque)
  (if (empty-deque? deque)
    (error "an empty deque has no rear")
    (element (last-node deque))))
(define (insert-initial-deque! deque element)
  (let ((initial-node (make-singleton-deque-node element)))
    (set-first-node! deque initial-node)
    (set-last-node! deque initial-node)))
(define (front-insert-deque! deque element)
  (if (empty-deque? deque)
      (insert-initial-deque! deque element)
      (let ((new-node (make-deque-node '() element (first-node deque))))
        (set-prev-node! (first-node deque) new-node)
        (set-first-node! deque new-node))))
(define (rear-insert-deque! deque element)
  (if (empty-deque? deque)
      (insert-initial-deque! deque element)
      (let ((new-node (make-deque-node (last-node deque) element '())))
        (set-next-node! (last-node deque) new-node)
        (set-last-node! deque new-node))))
(define (front-delete-deque! deque)
  (let ((result (front-deque deque))
        (new-first-node (next-node (first-node deque))))
    (set-first-node! deque new-first-node)
    (if (null? new-first-node)
        (set-last-node! deque new-first-node)
        (set-prev-node! new-first-node '()))
    result))
(define (rear-delete-deque! deque)
  (let ((result (rear-deque deque))
        (new-last-node (prev-node (last-node deque))))
    (set-last-node! deque new-last-node)
    (if (null? new-last-node)
        (set-first-node! deque new-last-node)
        (set-next-node! new-last-node '()))
    result))

(println "empty deque")
(define dq (make-deque))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "inserting 'a at front")
(front-insert-deque! dq 'a)
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "inserting 'b at front")
(front-insert-deque! dq 'b)
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "inserting 'c at rear")
(rear-insert-deque! dq 'c)
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "inserting 'd at rear")
(rear-insert-deque! dq 'd)
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "front: " (front-deque dq))
(println "rear: " (rear-deque dq))
(println "delete front: " (front-delete-deque! dq))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "delete front: " (front-delete-deque! dq))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "delete front: " (front-delete-deque! dq))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
(println "delete rear: " (rear-delete-deque! dq))
(print-deque dq)
(println "empty-deque? " (empty-deque? dq))
