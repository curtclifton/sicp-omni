#lang racket

(require "helpers.rkt")
(require "mcons-all-the-things.rkt")

;;; Exercise 3.22

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) (null? front-ptr))
    (define (insert-queue! element)
      (cond ((empty-queue?)
              (set! front-ptr (list element))
              (set! rear-ptr front-ptr))
            (else
              (set-cdr! rear-ptr (list element))
              (set! rear-ptr (cdr rear-ptr))
              )))
    (define (delete-queue!)
      (cond ((empty-queue?) (error "attempting to delete from empty queue"))
            (else
              (set! front-ptr (cdr front-ptr)))))
    (define (print-queue)
      (display front-ptr)
      (newline))
    (define (dispatch m)
      (cond
        ((eq? m 'empty-queue?) empty-queue?)
        ((eq? m 'insert-queue!) insert-queue!)
        ((eq? m 'delete-queue!) delete-queue!)
        ((eq? m 'print-queue) print-queue)
        (else (error "unknown message to queue: " m))
      ))
    dispatch))

(println "making a new queue")
(define q1 (make-queue))
((q1 'print-queue))
(println "((q1 'empty-queue?)): " ((q1 'empty-queue?)))
(println "inserting 'a")
((q1 'insert-queue!) 'a)
((q1 'print-queue))
(println "((q1 'empty-queue?)): " ((q1 'empty-queue?)))
(println "inserting 'b")
((q1 'insert-queue!) 'b)
((q1 'print-queue))
(println "((q1 'empty-queue?)): " ((q1 'empty-queue?)))
(println "deleting")
((q1 'delete-queue!))
((q1 'print-queue))
(println "((q1 'empty-queue?)): " ((q1 'empty-queue?)))
(println "deleting")
((q1 'delete-queue!))
((q1 'print-queue))
(println "((q1 'empty-queue?)): " ((q1 'empty-queue?)))
